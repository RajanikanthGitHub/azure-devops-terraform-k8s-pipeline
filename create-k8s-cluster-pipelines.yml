# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  client_id: 53d2cc47-e67b-4dec-88d0-63c5bca5cef0
  client_secret: vm3yAZWllKjN7~Z3gklQ6XXE38Zhjqwq2-


steps:
- script: echo K8S Terraform, Azure DevOps Piepline!
  displayName: 'Run a one-line script'
- task: DownloadSecureFile@1
  name: publickey 
  inputs:
    secureFile: 'id_rsa.pub'

<<<<<<< HEAD
## installing Terraform tool
=======
# ## installing Terraform tool
>>>>>>> 9425b799216cdf44764a5fb4fbef3990da70d983
# - task: TerraformInstaller@0
#   inputs:
#     terraformVersion: '0.15.3'

## this is to for k8s cluster creation using terraform code
- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/configuration/iaac/azure'
    backendServiceArm: 'ARM-Subscription-connection'
    backendAzureRmResourceGroupName: 'rg-terraformstate'
    backendAzureRmStorageAccountName: 'terraformdemostg'
    backendAzureRmContainerName: 'storageconnection'
    backendAzureRmKey: 'k8s.tfstate'


- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/configuration/iaac/azure'
    environmentServiceNameAzureRM: 'ARM-Subscription-connection'
    commandOptions: '-var client_id=$(client_id) -var client_secret=$(client_secret) -var ssh_public_key=$(publickey.secureFilePath)'

<<<<<<< HEAD
- task: Terraform
=======
- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/configuration/iaac/azure'
    commandOptions: '-var client_id=$(client_id) -var client_secret=$(client_secret) -var ssh_public_key=$(publickey.secureFilePath)'
    environmentServiceNameAzureRM: 'ARM-Subscription-connection'

>>>>>>> 9425b799216cdf44764a5fb4fbef3990da70d983
